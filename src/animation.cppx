#include "animation.h"

void welcomeLightScanning(){
  printf("welcomeLightScanning\n");
  
  // leds.fill_solid(CRGB::Black);
  // FastLED.show();
  // scanning one pixel both directions to center of the strip then back to outer edges
  for (int i = 0; i < NUM_LEDS_2; i++)
  {
    leds[i] = CRGB::White;
    leds[NUM_LEDS - i - 1] = CRGB::White;
    if (i < NUM_LEDS2_2)
    {
      leds2[i] = CRGB::White;
      leds2[NUM_LEDS2 - i - 1] = CRGB::White;
    }
    FastLED.show();
    vTaskDelay(20 / portTICK_PERIOD_MS);
  }

}

void welcomeLightStack(){
  printf("welcomeLightStack\n");
  CRGBArray<4> brightness;
  brightness[3] = CRGB::White;
  brightness[2] = brightness[3].fadeToBlackBy(30);
  brightness[1] = brightness[2].fadeToBlackBy(64);
  brightness[0] = brightness[1].fadeToBlackBy(100);
  printf("black\n");
  leds.fill_solid(CRGB::Black);
  FastLED.show();
  printf("showing\n");
  // if( show_mutex != NULL )
  // {
  // if( xSemaphoreTake( show_mutex, portMAX_DELAY ) == pdTRUE )
  // {

  for (int i = 1; i < 4; i++)
  {
    for (int j = 0; j < NUM_LEDS_2; j++)
    {
      for (int k = 0; k < NUM_LEDS_2 - j; k++)
      {
        for (int l = 0; l < NUM_LEDS_2 - j; l++)
        {
          if (l == k)
          {
            leds[l] = brightness[i];
            leds[NUM_LEDS - l - 1] = brightness[i];
            if (j < NUM_LEDS2_2)
            {
              leds2[l] = brightness[i];
              leds2[NUM_LEDS2 - l - 1] = brightness[i];
            }
          }
          else
          {
            leds[l] = brightness[i - 1];
            leds[NUM_LEDS - l - 1] = brightness[i - 1];
            if (j < NUM_LEDS2_2)
            {
              leds2[l] = brightness[i - 1];
              leds2[NUM_LEDS2 - l - 1] = brightness[i - 1];
            }
          }
        }
        // printf("showing\n");
        // vTaskDelay(5 / portTICK_PERIOD_MS);
        FastLED.show();
        // vTaskDelay(100 / portTICK_PERIOD_MS);
      }
    }
    // xSemaphoreGive( show_mutex );
    //   }
    // }
  }
}
